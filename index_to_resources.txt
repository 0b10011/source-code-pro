Index to resources in repository for Source Code Pro

	This document’s purpose is to provide a description of the file types and 
folder structure found in this repository and the tools used to generate and
process them.

A.	Key to File Types:

	1.	Files for design
		The vast majority of files in this repository belong to the Unified Font 
		Object (ufo) storage format, which is an open format and largely XML based. 
		This document will not describe UFO-related files that are specified in 
		the official documentation of the UFO specification, that can be found 
		online at: 
		http://unifiedfontobject.org/ OR
		https://github.com/unified-font-object/ufo-spec

		1.1	Master UFO files
			A master, in the context of typeface design, is a designed reference 
			point that defines the bounds of the design space. Master files must 
			be point-compatible with all other masters in order to enable the 
			interpolation of intermediate instances within the design space that 
			the masters define. Master UFO files are what the designer modifies 
			directly using a font editor that has UFO import/export support.
				The master UFO files live in the directories named 'RomanMasters' 
			and 'ItalicMasters'. These have the family name, eg. 'SourceCodePro', 
			in the UFO file name, to which is appended '-It' for italic masters, 
			and '_d' where d is a digit that corresponds to the the master’s 
			index number.

[		1.1	UFO files in this repository

			a.	Default UFO data files:
				The UFO files in this repository follow the structure outlined 
				in the documentation referenced above, however you will also 
				find some:
			
			b.	Custom UFO data files:

				b.1	com.adobe.type.processedHashMap, in 'data' folder
					This file stores a hash of the outlines of all glyphs in the 
					default layer (glyphs folder). This is for the purpose of 
					tracking which modified glyphs need to be processed by 
					checkOutlines (FDK) and autohint (FDK).

		1.2	UFO types in this repository
]

	2.	Files for Adobe Font Development Kit for OpenType (FDK)
		The FDK is an open source set of tools developed and maintained by Adobe 
		for the purpose of developing, compiling, and processing OpenType (OT) 
		fonts, specifically for Compact Font Format (CFF) fonts, but with some 
		TrueType (TTF) font support as well.

		2.1	File type XXX

	3.	Files for interpolation

	4.	Files for font compliation
		4.1	Instance UFO files
			An instance, in the context of font development, is a input file that 
			is automatically interpolated from within the design space of the 
			master files. Instance UFOs are generated by the makeInstancesUFO 
			(FDK) tool, which will also flatten (remove overlaps) and add 
			hinting instructions to all glyphs. Instance UFO files will also con-
			tain interpolated kerning and anchor infomation if present in the 
			master UFO files.
				The instance UFO files live in directories that correspond to 
			their style names, eg. 'Regular' for the Regular style. Instance 
			files typically are simply named 'font.ufo'.

	5.	Files for storage of information
		These files, although not strictly necessary, are helpful auxilliary files 
		that can aid in the type design / font development process.
	
	3.	-.designspace
		This is a MutatorMath file in XML format that maps the relationships 
		between the design master UFOs and the instances that will be generated 
		by those using the makeInstancesUFO (FDK) tool. The designspace file can 
		be output by Superpolator (3rd party, proprietary tool), or crafted and 
		edited by any text editor.


B.	Key to Folder Structure*:

SoucrceCodePro
	└ RomanMasters
		└ SourceCodePro_0.ufo
			├ metainfo.plist
			├ lib.plist
			├ fontinfo.plist
			├ features.fea
			├ groups.plist
			└ glyphs
				├ contents.plist
				├ _notdef.glif
				├ a.glif
				├ …
		├ …
		├ SourceCodePro.designspace
		├ SourceCodePro.sp3
		├ anchors_0
		├ anchors_2
		├ derivedchars_0
		└ derivedchars_2
	└ ItalicMasters
		└ do.
	└ Roman
		└ Regular
			└ font.ufo
				├ metainfo.plist
				├ lib.plist
				├ fontinfo.plist
				├ groups.plist
				├ layercontents.plist
				└ glyphs
					├ contents.plist
					├ _notdef.glif
					├ a.glif
					├ …
				└ glyphs.com.adobe.type.processedGlyphs
					└ do.
				└ data
					└ com.adobe.type.processedHashMap
			├ derivedchars_TT
			├ features
			├ font.ttf
			├ fontinfo
			├ mark.fea
			├ markclasses.fea
			├ mkmk.fea
			├ ppms
			└ tthints
		├ …
	└ Italic
		└ do.
	├ family.fea
	├ FontMenuNameDB
	├ GlyphOrderAndAliasDB
	├ tables.fea
	├ widthsAdjust.fea
	├ build.sh
	├ package.json
	├ .gitignore
	├ LICENSE.txt
	├ ReadMe.html
	├ README.md
	├ relnotes.txt
	├ Roadmap.txt
	├ SourceCodeProReadMe.html
	└ index_to_resources.txt

* This structure breaks from alphabetical ordering and uses logical order where 
it would help to simplify the the representation of the file structure. The fol-
lowing conventions are also used to this end: do. to connote that the contents 
are structurally the same as the previous item at the same level (if having dif-
ferent file names), … to connote an ellision of files of the same type as the 
previous item at the same level.